#!/usr/bin/env ruby

require 'webrick'
require 'ostruct'
require 'optparse'
require 'logger'
require 'base64'
require 'markdown'
require 'mime/types'
require 'erb'
require 'cgi' # for escaping only
require 'fileutils'


HEAD_TEMPLATE = %q{
<html>
  <head>
    <title><%=h title %> -- Wik</title>
    <meta charset="UTF-8">

    <style type="text/css">
      div#banner{
        width: 100%;
        border-bottom: solid 2px #333;
        background-color: #eee;
      }

      div#banner h1{
        font-size: 1em;
        margin: 0.1em;
        padding: 0.1em;
        line-height: 1em;
      }

      div#footer{
        background-color: #eee;
        border-top: solid 2px #333;
        font-size: smaller;
        text-align: center;
      }

      div#menu{
        padding: 0 0.2em;
      }

      div#menu{
        text-align: right;
        float: right;
      }

      div#menu a{
        font-size: smaller;
        text-decoration: none;
        color: blue;
      }

      textarea#editbox{
        width: 95%;
        min-width: 400px;
        height: 400px;
        margin: 0 auto;
        display: block;
      }

      div#hide_edit{
        width: 100%;
        background-color: #eee;
        text-align: center;
        font-size: smaller;
      }
      
      div#hide_edit div#edit{
        display: none;
      }

      div#hide_edit:hover div#edit{
        display: block;
      }

      div#hide_edit:hover span#prompt{
        display: none;
      }
      
      div#hide_edit span#prompt_stick{
        display: none;
      }

      div#hide_edit:hover span#prompt_stick{
        display: inline;
      }

      div#edit{
        padding: 1em 0;
        text-align: center;
      }

      div#errors{
        border: solid 1px red;
        margin: 0.2em;
        padding: 0 0.2em;
        background-color: #ffd;
        font-size: smaller;
      }

      div#errors span#click_hide{
        float: right;
      }

      div#errors ul{
        margin: 0 0.1em;
        padding: 0;
      }

      div#errors ul li{
        list-style-type: none;
        padding: 0.1em;
        margin: 0.1em;
      }

      /* ------------ Main content styling ---------------- */
      /* Taken from https://github.com/jasonm23/markdown-css-themes */

      html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }

      body{
      color:#444;
      font-family:Georgia, Palatino, 'Palatino Linotype', Times, 'Times New Roman', serif;
      font-size:12px;
      line-height:1.5em;
      padding:1em;
      margin:auto;
      max-width:42em;
      background:#fefefe;
      }

      a{ color: #0645ad; text-decoration:none;}
      a:visited{ color: #0b0080; }
      a:hover{ color: #06e; }
      a:active{ color:#faa700; }
      a:focus{ outline: thin dotted; }
      a:hover, a:active{ outline: 0; }

      ::-moz-selection{background:rgba(255,255,0,0.3);color:#000}
      ::selection{background:rgba(255,255,0,0.3);color:#000}

      a::-moz-selection{background:rgba(255,255,0,0.3);color:#0645ad}
      a::selection{background:rgba(255,255,0,0.3);color:#0645ad}

      p{
      margin:1em 0;
      }

      img{
      max-width:100%;
      }

      h1,h2,h3,h4,h5,h6{
      font-weight:normal;
      color:#111;
      line-height:1em;
      }
      h4,h5,h6{ font-weight: bold; }
      h1{ font-size:2.5em; }
      h2{ font-size:2em; }
      h3{ font-size:1.5em; }
      h4{ font-size:1.2em; }
      h5{ font-size:1em; }
      h6{ font-size:0.9em; }

      blockquote{
      color:#666666;
      margin:0;
      padding-left: 3em;
      border-left: 0.5em #EEE solid;
      }
      hr { display: block; height: 2px; border: 0; border-top: 1px solid #aaa;border-bottom: 1px solid #eee; margin: 1em 0; padding: 0; }
      pre, code, kbd, samp { color: #000; font-family: monospace, monospace; _font-family: 'courier new', monospace; font-size: 0.98em; }
      pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; }

      b, strong { font-weight: bold; }

      dfn { font-style: italic; }

      ins { background: #ff9; color: #000; text-decoration: none; }

      mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; }

      sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
      sup { top: -0.5em; }
      sub { bottom: -0.25em; }

      ul, ol { margin: 1em 0; padding: 0 0 0 2em; }
      li p:last-child { margin:0 }
      dd { margin: 0 0 0 2em; }

      img { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; }

      table { border-collapse: collapse; border-spacing: 0; }
      td { vertical-align: top; }

      @media only screen and (min-width: 480px) {
      body{font-size:14px;}
      }

      @media only screen and (min-width: 768px) {
      body{font-size:16px;}
      }

      @media print {
        * { background: transparent !important; color: black !important; filter:none !important; -ms-filter: none !important; }
        body{font-size:12pt; max-width:100%;}
        a, a:visited { text-decoration: underline; }
        hr { height: 1px; border:0; border-bottom:1px solid black; }
        a[href]:after { content: " (" attr(href) ")"; }
        abbr[title]:after { content: " (" attr(title) ")"; }
        .ir a:after, a[href^="javascript:"]:after, a[href^="#"]:after { content: ""; }
        pre, blockquote { border: 1px solid #999; padding-right: 1em; page-break-inside: avoid; }
        tr, img { page-break-inside: avoid; }
        img { max-width: 100% !important; }
        @page :left { margin: 15mm 20mm 15mm 10mm; }
        @page :right { margin: 15mm 10mm 15mm 20mm; }
        p, h2, h3 { orphans: 3; widows: 3; }
        h2, h3 { page-break-after: avoid; }
        div#banner, div#hide_edit{ display: none;}
      }

    </style>

  </head>
  <body>
    <div id="banner">
      <div id="menu">
        <% if basedir != @basedir %>
        <a href="../">[&larr;]</a>
        <% end %>
        <%= dirs.map{|c|
          c = "<a href='#{c}#{File.directory?(File.join(basedir, c)) ? '/' : ''}'/>#{h c}</a>"
        }.join(", ") %>
      </div>
      <h1><%= title %></h1>
    </div>

    <!-- error listing -->
    <% if @error.length > 0 %>
      <div id="errors">
        <span id="click_hide" onclick="javascript:document.getElementById('errors').style.display='none';">click to hide</span>
        <ul>
          <% @error.each{|e| %>
            <li><%=h e%></li>
          <% } %>
        </ul>
      </div>
    <% end 
    consume_errors %>
}

EDIT_TEMPLATE = %{
  <% if type == :text and not @readonly %>
    <div id="edit">
      <form action="" method="POST">
        <textarea id="editbox" name="content"><%=h File.exist?(path) ? File.read(path) : '' %></textarea>
        <% if @editpass.length > 0 %>
          <label for="pass">Password:</label><input type="password" name="pass" value=""/><br/>
        <% end %>
        <input type="hidden" value="<%=h path%>" name="path"/>
        <input type="reset" value="Reset"/>
        <input type="submit" value="Edit <%=h title%>"/>
      </form>
    </div>
  <% end %>
}

FOOT_TEMPLATE = %{
    <div id="footer">
      <% if File.exist?(path) %>
        Last edited: <%= File.mtime(path) %>
      <% end %>
    </div>
}

END_TEMPLATE = %{
  </body>
</html>
}


DIR_TEMPLATE= %{
    <h2>Directories</h2>
    <ul>
    <% dirs.each{|c| %>
      <li><a href="<%=h c%><%= File.directory?(File.join(basedir, c)) ? '/' : ''%>"/><%=h c%></a></li>
    <%}%>
    </ul>
    <h2>Files</h2>
    <ul>
    <% files.each{|c| %>
      <li><a href="<%=h c%>"/><%=h c%></a></li>
    <%}%>
    </ul>
} 

PAGE_TEMPLATE= HEAD_TEMPLATE + %{
    <%= content %>
} + FOOT_TEMPLATE + %{
    <% if not @readonly %>
      <div id="hide_edit">
        <span id="prompt">Hover to show edit box.</span>
        <span id="prompt_stick" onclick="javascript:{document.getElementById('prompt_stick').style.display = 'none'; document.getElementById('prompt').style.display = 'none'; document.getElementById('edit').style.display = 'block';};">Click to pin edit box.</span>
} + EDIT_TEMPLATE + %{
      </div>
    <% end %>
} + END_TEMPLATE

MISSING_TEMPLATE = HEAD_TEMPLATE + %{
  <% if not @readonly %>
    <h2>Editing Page: <%=h title%></h2>
} + EDIT_TEMPLATE + %{
  <hr/>
  <% end %>
} + DIR_TEMPLATE + FOOT_TEMPLATE + END_TEMPLATE

FAVICON = "AAABAAMAICAQAAAAAADoAgAANgAAABAQEAAAAAAAKAEAAB4DAAAwMAAAAAAAAKgOAABGBAAAKAAA
ACAAAABAAAAAAQAEAAAAAACAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACAAAAA
gACAAICAAADAwMAAgICAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAAAAAA
AAAAd3d3d3d3d3d3d3d3d3d3cH//////f/////9//////3B/9wAH/3/3AAf/f/cAB/9wf3AAAH9/
cAAAf39wAAB/cH8AAAAPfwAAAA9/AAAAD3B/AAAAD38AAAAPfwAAAA9wfwAAAA9/AAAAD38AAAAP
cH9wAAB/f3AAAH9/cAAAf3B/9wAH/3/3AAf/f/cAB/9wf/////9//////3//////cHd3d3d3d3d3
d3d3d3d3d3B//////3//////f/////9wf/////9//////3/3AAf/cH//////f/////9/cAAAf3B/
/////3//////fwAAAA9wf/////9//////38AAAAPcH//////f/////9/AAAAD3B//////3//////
f3AAAH9wf/////9//////3/3AAf/cH//////f/////9//////3B3d3d3d3d3d3d3d3d3d3dwf///
//9//////3//////cH//////f/cAB/9//////3B//////39wAAB/f/////9wf/////9/AAAAD3//
////cH//////fwAAAA9//////3B//////38AAAAPf/////9wf/////9/cAAAf3//////cH//////
f/cAB/9//////3B//////3//////f/////9wd3d3d3d3d3d3d3d3d3d3cP////8AAAABAAAAAQAA
AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAA
AQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAAB
KAAAABAAAAAgAAAAAQAEAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIAAAACAgACA
AAAAgACAAICAAADAwMAAgICAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wB3d3d3d3d3d38A
9/APfwD3cAAHAABwAAdwAAcAAHAAB38A9/APfwD3d3d3d3d3d3d///f//38A93//9///cAAHf//3
//9wAAd///f//38A93d3d3d3d3d3f//38A9///d///cAAH//93//9wAAf//3f//38A9///d3d3d3
d3d3dwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAoAAAAMAAAAGAAAAABAAgAAAAAAIAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
gAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwADA3MAA8MqmAAQEBAAICAgADAwMABEREQAWFhYAHBwc
ACIiIgApKSkAVVVVAE1NTQBCQkIAOTk5AIB8/wBQUP8AkwDWAP/szADG1u8A1ufnAJCprQAAADMA
AABmAAAAmQAAAMwAADMAAAAzMwAAM2YAADOZAAAzzAAAM/8AAGYAAABmMwAAZmYAAGaZAABmzAAA
Zv8AAJkAAACZMwAAmWYAAJmZAACZzAAAmf8AAMwAAADMMwAAzGYAAMyZAADMzAAAzP8AAP9mAAD/
mQAA/8wAMwAAADMAMwAzAGYAMwCZADMAzAAzAP8AMzMAADMzMwAzM2YAMzOZADMzzAAzM/8AM2YA
ADNmMwAzZmYAM2aZADNmzAAzZv8AM5kAADOZMwAzmWYAM5mZADOZzAAzmf8AM8wAADPMMwAzzGYA
M8yZADPMzAAzzP8AM/8zADP/ZgAz/5kAM//MADP//wBmAAAAZgAzAGYAZgBmAJkAZgDMAGYA/wBm
MwAAZjMzAGYzZgBmM5kAZjPMAGYz/wBmZgAAZmYzAGZmZgBmZpkAZmbMAGaZAABmmTMAZplmAGaZ
mQBmmcwAZpn/AGbMAABmzDMAZsyZAGbMzABmzP8AZv8AAGb/MwBm/5kAZv/MAMwA/wD/AMwAmZkA
AJkzmQCZAJkAmQDMAJkAAACZMzMAmQBmAJkzzACZAP8AmWYAAJlmMwCZM2YAmWaZAJlmzACZM/8A
mZkzAJmZZgCZmZkAmZnMAJmZ/wCZzAAAmcwzAGbMZgCZzJkAmczMAJnM/wCZ/wAAmf8zAJnMZgCZ
/5kAmf/MAJn//wDMAAAAmQAzAMwAZgDMAJkAzADMAJkzAADMMzMAzDNmAMwzmQDMM8wAzDP/AMxm
AADMZjMAmWZmAMxmmQDMZswAmWb/AMyZAADMmTMAzJlmAMyZmQDMmcwAzJn/AMzMAADMzDMAzMxm
AMzMmQDMzMwAzMz/AMz/AADM/zMAmf9mAMz/mQDM/8wAzP//AMwAMwD/AGYA/wCZAMwzAAD/MzMA
/zNmAP8zmQD/M8wA/zP/AP9mAAD/ZjMAzGZmAP9mmQD/ZswAzGb/AP+ZAAD/mTMA/5lmAP+ZmQD/
mcwA/5n/AP/MAAD/zDMA/8xmAP/MmQD/zMwA/8z/AP//MwDM/2YA//+ZAP//zABmZv8AZv9mAGb/
/wD/ZmYA/2b/AP//ZgAhAKUAX19fAHd3dwCGhoYAlpaWAMvLywCysrIA19fXAN3d3QDj4+MA6urq
APHx8QD4+PgA8Pv/AKSgoACAgIAAAAD/AAD/AAAA//8A/wAAAP8A/wD//wAA////AAoKCgoKCgoK
CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK
CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcH
BwcHBwcHBwcHBwcHBwcHBwcHBwcKCgf//////////////////wf//////////////////wf/////
/////////////wcKCgf////z7EMKCkPs8////wf////z7EMKCkPs8////wf////z7EMKCkPs8///
/wcKCgf///BDCgoKCgoKQ/D//wf///BDCgoKCgoKQ/D//wf///BDCgoKCgoKQ/D//wcKCgf/80MK
CgoKCgoKCkPz/wf/80MKCgoKCgoKCkPz/wf/80MKCgoKCgoKCkPz/wcKCgf/7AoKCgoKCgoKCgrs
/wf/7AoKCgoKCgoKCgrs/wf/7AoKCgoKCgoKCgrs/wcKCgf/QwoKCgoKCgoKCgpD/wf/QwoKCgoK
CgoKCgpD/wf/QwoKCgoKCgoKCgpD/wcKCgf/CgoKCgoKCgoKCgoK/wf/CgoKCgoKCgoKCgoK/wf/
CgoKCgoKCgoKCgoK/wcKCgf/CgoKCgoKCgoKCgoK/wf/CgoKCgoKCgoKCgoK/wf/CgoKCgoKCgoK
CgoK/wcKCgf/QwoKCgoKCgoKCgpD/wf/QwoKCgoKCgoKCgpD/wf/QwoKCgoKCgoKCgpD/wcKCgf/
7AoKCgoKCgoKCgrs/wf/7AoKCgoKCgoKCgrs/wf/7AoKCgoKCgoKCgrs/wcKCgf/80MKCgoKCgoK
CkPz/wf/80MKCgoKCgoKCkPz/wf/80MKCgoKCgoKCkPz/wcKCgf///BDCgoKCgoKQ/D//wf///BD
CgoKCgoKQ/D//wf///BDCgoKCgoKQ/D//wcKCgf////z7EMKCkPs8////wf////z7EMKCkPs8///
/wf////z7EMKCkPs8////wcKCgf//////////////////wf//////////////////wf/////////
/////////wcKCgcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcK
Cgf//////////////////wf//////////////////wf//////////////////wcKCgf/////////
/////////wf//////////////////wf////z7EMKCkPs8////wcKCgf//////////////////wf/
/////////////////wf///BDCgoKCgoKQ/D//wcKCgf//////////////////wf/////////////
/////wf/80MKCgoKCgoKCkPz/wcKCgf//////////////////wf//////////////////wf/7AoK
CgoKCgoKCgrs/wcKCgf//////////////////wf//////////////////wf/QwoKCgoKCgoKCgpD
/wcKCgf//////////////////wf//////////////////wf/CgoKCgoKCgoKCgoK/wcKCgf/////
/////////////wf//////////////////wf/CgoKCgoKCgoKCgoK/wcKCgf/////////////////
/wf//////////////////wf/QwoKCgoKCgoKCgpD/wcKCgf//////////////////wf/////////
/////////wf/7AoKCgoKCgoKCgrs/wcKCgf//////////////////wf//////////////////wf/
80MKCgoKCgoKCkPz/wcKCgf//////////////////wf//////////////////wf///BDCgoKCgoK
Q/D//wcKCgf//////////////////wf//////////////////wf////z7EMKCkPs8////wcKCgf/
/////////////////wf//////////////////wf//////////////////wcKCgcHBwcHBwcHBwcH
BwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcKCgf//////////////////wf/////
/////////////wf//////////////////wcKCgf//////////////////wf////z7EMKCkPs8///
/wf//////////////////wcKCgf//////////////////wf///BDCgoKCgoKQ/D//wf/////////
/////////wcKCgf//////////////////wf/80MKCgoKCgoKCkPz/wf//////////////////wcK
Cgf//////////////////wf/7AoKCgoKCgoKCgrs/wf//////////////////wcKCgf/////////
/////////wf/QwoKCgoKCgoKCgpD/wf//////////////////wcKCgf//////////////////wf/
CgoKCgoKCgoKCgoK/wf//////////////////wcKCgf//////////////////wf/CgoKCgoKCgoK
CgoK/wf//////////////////wcKCgf//////////////////wf/QwoKCgoKCgoKCgpD/wf/////
/////////////wcKCgf//////////////////wf/7AoKCgoKCgoKCgrs/wf/////////////////
/wcKCgf//////////////////wf/80MKCgoKCgoKCkPz/wf//////////////////wcKCgf/////
/////////////wf///BDCgoKCgoKQ/D//wf//////////////////wcKCgf/////////////////
/wf////z7EMKCkPs8////wf//////////////////wcKCgf//////////////////wf/////////
/////////wf//////////////////wcKCgcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcH
BwcHBwcHBwcHBwcHBwcKCv///////wAA////////AAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAA
AAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAA
AAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAA
AAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAA
AAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAA
AwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAAD
AAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAMA
AA=="


# Parse command-line options.
def parse
  # Set up defaults
  opts            = OpenStruct.new
  opts.daemonise  = true
  opts.interface  = "127.0.0.1"
  opts.port       = 8080
  opts.path       = "./content/"
  opts.default    = 'Index'
  opts.readonly   = false
  opts.editpass   = ''

  op = OptionParser.new do |o|
    o.on('-p', '--port PORT', 'Port to listen on'){ |x| opts.port = x.to_i }
    o.on('-D', '--default INDEX', 'Index page name'){ |x| opts.default = x.to_s }
    o.on('-n', '--no-daemonise', 'Do not daemonise process'){ |x| opts.daemonise = false }
    o.on('-i', '--interface INTERFACE', 'Listen on the given interface (default is 127.0.0.1)'){|x| opts.interface = x.to_s }
    o.on('-r', '--read-only', 'Disable editing features'){ |x| opts.readonly = true }
    # o.on('-k', '--there-can-be-only-one', 'Only allow one instance (kill if a pid file is found)'){ |x| opts.kill = true }
    o.on('-d', '--directory DIR', 'The directory in which to find content'){ |d| opts.path = d.to_s }
    o.on('-e', '--edit-pw PASSWORD', 'The password to use to prevent editing (insecure without SSL)'){|x| opts.editpass = x.to_s } 
  end
  op.parse!

  return opts
end

# Server that passes things onto the wiki engine
class Server < WEBrick::HTTPServlet::AbstractServlet
  def self.serve(port, bind=nil, local_resource_path="", engine=nil)
    server = WEBrick::HTTPServer.new(:Port        => port, 
                                     :BindAddress => bind)

    # server.mount("/#{resources}",     WEBrick::HTTPServlet::FileHandler, local_resource_path, {:FancyIndexing => false})
    server.mount("/", Server, {:engine => engine})

    trap "INT" do server.shutdown end
    server.start
  end

  def initialize(server, options={})
    super(server, options)
    @engine = options[:engine]
  end

  def do_GET(request, response)
    status, content_type, body, cookies = @engine.get(request)
    return build_response( response, status, cookies, content_type, body )
  #rescue HTMLError => htmle 
  #  return htmle.code, 'text/plain', "#{htmle}\n\n#{htmle.backtrace.join("\n")}", {}
  # rescue Exception => e
  #   return 500, 'text/plain', "#{e}\n\n#{e.backtrace.join("\n")}", {}
  end

  def do_POST(request, response)
    status, content_type, body, cookies = @engine.post(request)
    return build_response( response, status, cookies, content_type, body )
  # rescue HTMLError => htmle 
  #   return htmle.code, 'text/plain', "#{htmle}\n\n#{htmle.backtrace.join("\n")}", {}
  # rescue Exception => e
  #   return 500, 'text/plain', "#{e}\n\n#{e.backtrace.join("\n")}", {}
  end

  private

  # build a response to the client from the given data
  def build_response( response, status, cookies, content_type, body )
    response.status           = status || 200
    cookies.each{ |k,v|         response.cookies << "#{k}=#{v}" }
    response['Content-Type']  = content_type || 'text/plain'
    response.body             = body || ''

    return response
  end
end


class HTMLError < Exception 
  attr_reader :code

  def initialize(msg, code)
    super(msg)
    @code = code
  end

end

# Simple wiki engine
class SimpleWikEngine
  def initialize(path, readonly=false, editpass='', default="Index", blacklist=['.', '..'], extensions=%w{markdown mdown mkdn md mkd mdwn mdtxt mdtext text})
    @basedir    = path
    @extensions = extensions
    @blacklist = blacklist 
    @default = default
    @readonly = readonly
    @editpass = editpass
    @error = []
  end

  # get request
  def get(req)
    render(req)
  end

  # Post request, don't do anything special for now.
  def post(req)
    return nonfatal(req, "Wik is in read-only mode") if @readonly

    params = CGI::parse(req.body)

    # Handle any parameters
    # First check we have both content and path
    return nonfatal(req, "Wrong parameters to POST Request")  if not params.keys.include?('content') and params.keys.include?('path')
    return nonfatal(req, "No password supplied!")             if @editpass.length > 0 and not params.keys.include?('pass')
    return nonfatal(req, "Wrong password!")                   if @editpass.length > 0 and @editpass != params['pass'][0].to_s
  

    #Check path.  IF it doesn't exist, create it
    path = params['path'][0].to_s 
    if not File.exist?(path) then
      # Work out the directory and mkdir -p it if it doesn't exist already
      dirname     = (path[-1] == File::SEPARATOR or File.directory?(path)) ? path : File.dirname(path)
      FileUtils.mkdir_p( dirname )

      # if the thing is not a directory, touch it
      FileUtils.touch(path) if path[-1] != File::SEPARATOR
    end
    return nonfatal(req, "Cannot write to that path, as it is a directory!") if File.directory?(path)
    return nonfatal(req, "Permission denied trying to write to #{path}") if not File.writable?(path)
    # here the file pointed to at path should be writable and present

    # write data
    fout = File.open(path, 'w')
    fout.write(params['content'][0])
    fout.close

    # Then show page
    get(req)
  end

  private

  # Add an error to the list, then call get
  # Allows processing of requests half-way through
  def nonfatal(req, msg)
    @error << msg
    return get(req)
  end

  def error(path, msg, code)
    return code, "text/html", "ERRL #{msg}", {}
  end

  def consume_errors()
    @error = []
  end

  def render(req, override_path=nil)
    # Build path
    path = override_path || File.join( @basedir, req.path )

    # Render favicon
    # avoid the correct MIME 'type image/vnd.microsoft.icon' because it doesn't work in ie
    return 200, 'image/x-icon', render_favicon(), {} if req.path == '/favicon.ico'

    # Check access to file or directory
    raise "Could not access path #{path}, though it exists." if File.exists?(path) and not File.readable?(path)

    # Check for default file if path is dir
    return render(req, File.join(path, @default)) if File.directory?(path) 
      #begin
      #   
      #rescue Exception => htmle
      #  return 200, 'text/html', generate_listing(path), {} if File.directory?(path)
      #end
   # end
    
    # Render file if found
    if File.exists?(path)
      mime, content = render_file(path)
      return 200, mime, content, {} 
    end

    # Check for all possible extensions and recurse if found
    @extensions.each{ |e|
      return render(req, "#{path}.#{e}") if File.exists?(path + ".#{e}") 
    }

      # Apply some heuristics to create some 'blank' edit pages
      path = "#{path}#{@default}" if  path.to_s[-1] == File::SEPARATOR
      path = "#{path}.#{@extensions[0]}" if not @extensions.include?(File.extname(path)[1..-1])
      mime, content = render_file(path)
      return 200, mime, content, {}
    
    raise "File not found: #{req.path}"
    #return 200, 'text/plain', "#{req.path}", {}
  end

  def render_file(path)
    # Return blank edit page if no file exists
    return "text/html; charset=UTF-8", compose_template(MISSING_TEMPLATE, File.basename(path), File.dirname(path), MIME::Types['text/plain'], path, '', :text) if not File.exist?(path) #and not @readonly 

    # render if markdown by extension or mime
    mime = MIME::Types.type_for(path)
    markdown_extension = @extensions.map{|e| File.extname(path).downcase == ".#{e}" }.include?(true)
    if markdown_extension or mime.include?(MIME::Types['text/plain'][0])
      content = Markdown.new( File.read(path) ).to_html 
      return 'text/html; charset=UTF-8', compose_template( PAGE_TEMPLATE, File.basename(path), File.dirname(path), mime[0], path, content, :text )
    end
    
    # else simply output the content raw (for binary types, html, etc)
    mime = mime[0] || MIME::Types['text/plain'][0]
    return mime, File.open(path, (mime.binary?) ? 'rb' : 'r' ).read
  end

  def render_favicon()
    return Base64.decode64(FAVICON)
  end

  def compose_template(template, title, pwd, mime, path, content, type=:text)
    # make local dir listing, with directories at the beginning
    dirs    = []
    files   = []
    basedir = File.directory?(path) ? path : File.dirname(path)
    Dir.foreach( basedir ){|d| 
      if not @blacklist.include?(d) #and not File.identical(path, d) then
        if File.directory?(File.join(basedir, d))
          dirs << d
        else
          files << d
        end
      end
    } if File.exist?( basedir )

    return ERB.new(template).result(binding)
  end

  def h(str)
    return CGI.escapeHTML(str.to_s)
  end

end


# =============================================================================
$opts = parse
Server.serve( $opts.port, $opts.interface, $opts.path, 
             SimpleWikEngine.new($opts.path, $opts.readonly, $opts.editpass, $opts.default) 
            )
